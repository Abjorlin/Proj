18/05 - 2020

I set up my github repository
. I Have downloaded the samplefile and extracted it. Using git bash I 
wrote the first 100 lines of the content to a textfile for viewing and gain an understanding.

20/05 - 2020
I have started thinking how to remove all the redundant information in the file, aswell as a way
to rename all identifiers without mishaps.
I wrote a test shell-script trim.sh to remove column 3,4,5 and 9 because they wont be useful, and remove 
contigs that are 100% overlaps. If length_of_overlap = end_of_overlap - start_of_overlap then its removed.
Test file which is the head 1000 lines was reduced to 463 lines.

22/05 - 2020
I have found a way to replace the string identifiers with unique integer identifiers. After using trim.sh 
on the data I run uniqs.sh on the trimmed file, which picks out all unique string identifiers from column 1
and 2 and adds it to a file. Then on that file i run sort -u "file" | uniqe -u > "newfile". Inside the new file
I will have all valid and uniqe identifiers. After doing that on the dataset it is reduced to 8084469 unique and
valid identifers.

I did some testing with my new scripts on the head 2000 lines from the data set to replace the identifiers with 
integers using replacetest.sh. However the script is slow and needs improvements before I attack the dataset.

I created test java classes called Graph2000.java and graphIO2000.java to put the data into a graph. From there 
I checked the length of the adjecency lists and made sure the code works. I am sure there will be problems with
the whole dataset which is why the classes are named *2000.java and are customized for smaller sized sets.

26/05 - 2020
After trying the script replace.sh on the head 50000 lines it took around 14 minutes, and my guess is that the
code has a quadratic timecomplexity, which makes it useless for that big dataset. So i need to find a new 
approach. In Eclipse I tried Integer.parseInt("Identifier", 36) and Identifier.hashCode() without success.

I wrote a new function in graph2000.java called degreeDistribution() that prints the node degree distribution.

29/05 - 2020
I solved the identifier nameing process today. In my GraphIO2000.java I read a trimmed file with string 
identifiers, convert them using hashCode(). Then I put the hashCode value as a key inside a hashtable
with its value to x where x enumerates from 0 to n.

I have started to write ConnectedComponents.java that counts the number of components aswell as their 
individual size using depth first search. It does not function properly yet.



